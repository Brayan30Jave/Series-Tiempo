ventas_num <- as.numeric(ventas_ts)
lag1_num <- as.numeric(ventas_lag1)
lag7_num <- as.numeric(ventas_lag7)
# 2. Rezagos (lags)
# Calcular el rezago de las ventas (ejemplo con 1 y 7 días de rezago)
ventas_lag1 <- datos %>%
group_by(transaction_date) %>%
summarise(VentasTotales = sum(cost)) %>%
mutate(Lag1 = lag(VentasTotales, 1)) %>% # lag() de dplyr ahora trabaja con un vector
pull(Lag1)
ventas_lag7 <- datos %>%
group_by(transaction_date) %>%
summarise(VentasTotales = sum(cost)) %>%
mutate(Lag7 = lag(VentasTotales, 7)) %>%
pull(Lag7)
# Crear el data.frame con los vectores numéricos
df_lags <- data.frame(Fecha = time(ventas_ts),
Ventas = ventas_num,
Lag1 = lag1_num,
Lag7 = lag7_num)
View(df_lags)
View(df_lags)
View(df_lags)
# Crear el data.frame con los vectores numéricos
df_lags <- data.frame(Fecha = time(ventas_ts),
cost = cost,
Lag1 = ventas_lag1,
Lag7 = ventas_lag7)
View(df_lags)
View(df_lags)
# 2. Rezagos (lags)
# Calcular el rezago de las ventas (ejemplo con 1 y 7 días de rezago)
ventas_lag1 <- lag(ventas_ts)
# 2. Rezagos (lags)
# Calcular el rezago de las ventas (ejemplo con 1 y 7 días de rezago)
ventas_lag1 <- lag(as.numeric(ventas_ts), 1)
ventas_lag7 <- lag(as.numeric(ventas_ts, 7)
ventas_lag7 <- lag(as.numeric(ventas_ts, 7))
# Crear el data.frame con los vectores numéricos
df_lags <- data.frame(Fecha = time(ventas_ts),
cost = cost,
Lag1 = ventas_lag1,
Lag7 = ventas_lag7)
ventas_lag7 <- lag(as.numeric(ventas_ts), 7)
# Crear el data.frame con los vectores numéricos
df_lags <- data.frame(Fecha = time(ventas_ts),
cost = cost,
Lag1 = ventas_lag1,
Lag7 = ventas_lag7)
# Crear el data.frame con los vectores numéricos
df_lags <- data.frame(Fecha = time(ventas_ts),
cost = ventas_ts,
Lag1 = ventas_lag1,
Lag7 = ventas_lag7)
View(df_lags)
# Graficar la serie y los rezagos
ggplot(df_lags, aes(x = Fecha)) +
geom_line(aes(y = cost, color = "cost")) +
geom_line(aes(y = Lag1, color = "Lag 1 día")) +
geom_line(aes(y = Lag7, color = "Lag 7 días")) +
ggtitle("Ventas Diarias Totales y Rezagos") +
xlab("Fecha") + ylab("cost") +
scale_color_manual(values = c("cost" = "blue", "Lag 1 día" = "red", "Lag 7 días" = "green"))
ventas_decomp <- decompose(ventas_ts)
datos <- read_excel("MUESTRA SERIE TIEMPO.xlsx", col_types = c("numeric", "numeric", "date", "numeric", "text", "numeric", "text", "numeric", "text", "numeric"))
library(readxl)
library(dplyr)
library(lubridate)
library(ggplot2)
library(forecast)
datos <- read_excel("MUESTRA SERIE TIEMPO.xlsx", col_types = c("numeric", "numeric", "date", "numeric", "text", "numeric", "text", "numeric", "text", "numeric"))
# Agregar una columna de mes para facilitar el análisis de estacionalidad
datos <- datos %>% mutate(Mes = month(transaction_date, label = TRUE, abbr = TRUE))
# Limpiar y transformar los datos
datos <- datos %>%
mutate(cost = as.numeric(gsub("[\\$, ]", "", cost)), # Elimina $, espacios y comas de 'cost' y lo convierte a numérico
transaction_date = ymd(transaction_date), # Convierte 'transaction_date' a formato de fecha
Ventas = quantity * cost * (1 - discount)) %>% # Calcula las ventas
filter(!is.na(cost))  # Elimina filas con costos NA (Producto 23)
# Promedio móvil
# Crear una serie de tiempo para las ventas diarias totales
ventas_ts <- ts(datos %>% group_by(transaction_date) %>% summarise(VentasTotales = sum(cost)) %>% pull(VentasTotales), frequency = 12)
# Calcular el promedio móvil (ejemplo con ventana de 7 días)
ventas_ma7 <- ma(ventas_ts, order = 7)
ventas_ma30 <- ma(ventas_ts, order = 30)
# Graficar la serie de tiempo y el promedio móvil
autoplot(ventas_ts) +
autolayer(ventas_ma7, series="Promedio Móvil 7 días") +
autolayer(ventas_ma30, series = "Promedio Móvil 30 días")+
ggtitle("Ventas Diarias Totales y Promedio Móvil") +
xlab("Fecha") + ylab("Ventas")
# 2. Rezagos (lags)
# Calcular el rezago de las ventas (ejemplo con 1 y 7 días de rezago)
ventas_lag1 <- lag(as.numeric(ventas_ts), 1)
ventas_lag7 <- lag(as.numeric(ventas_ts), 7)
# Crear el data.frame con los vectores numéricos
df_lags <- data.frame(Fecha = time(ventas_ts),
cost = ventas_ts,
Lag1 = ventas_lag1,
Lag7 = ventas_lag7)
# Graficar la serie y los rezagos
ggplot(df_lags, aes(x = Fecha)) +
geom_line(aes(y = cost, color = "cost")) +
geom_line(aes(y = Lag1, color = "Lag 1 día")) +
geom_line(aes(y = Lag7, color = "Lag 7 días")) +
ggtitle("Ventas Diarias Totales y Rezagos") +
xlab("Fecha") + ylab("cost") +
scale_color_manual(values = c("cost" = "blue", "Lag 1 día" = "red", "Lag 7 días" = "green"))
# 3. Estacionalidad (usando descomposición)
ventas_decomp <- decompose(ventas_ts)
autoplot(ventas_decomp) + ggtitle("Descomposición de la serie de tiempo de Ventas")
library(readxl)
library(dplyr)
library(lubridate)
library(ggplot2)
library(forecast)
datos <- read_excel("MUESTRA SERIE TIEMPO.xlsx", col_types = c("numeric", "numeric", "date", "numeric", "text", "numeric", "text", "numeric", "text", "numeric"))
# Agregar una columna de mes para facilitar el análisis de estacionalidad
datos <- datos %>% mutate(Mes = month(transaction_date, label = TRUE, abbr = TRUE))
# Promedio móvil
# Crear una serie de tiempo para las ventas diarias totales
ventas_ts <- ts(datos %>% group_by(transaction_date) %>% summarise(VentasTotales = sum(cost)) %>% pull(VentasTotales), frequency = 12)
# Limpiar y transformar los datos
datos <- datos %>%
mutate( transaction_date = ymd(transaction_date), # Convierte 'transaction_date' a formato de fecha
Ventas = quantity * cost * (1 - discount)) %>% # Calcula las ventas
filter(!is.na(cost))  # Elimina filas con costos NA (Producto 23)
# Promedio móvil
# Crear una serie de tiempo para las ventas diarias totales
ventas_ts <- ts(datos %>% group_by(transaction_date) %>% summarise(VentasTotales = sum(cost)) %>% pull(VentasTotales), frequency = 12)
# Limpiar y transformar los datos
datos <- datos %>%
mutate( transaction_date = ymd(transaction_date), # Convierte 'transaction_date' a formato de fecha
Ventas = quantity * cost * (1 - discount)) %>% # Calcula las ventas
filter(!is.na(cost))  # Elimina filas con costos NA (Producto 23)
#Agrupamos por meses
datos <- datos %>%
group_by(Mes, transaction_date = floor_date(transaction_date, "month")) %>% # Agrupa por mes
summarise(VentasTotales = sum(Ventas))
#Agrupamos por meses
datos <- datos %>%
group_by(Mes, transaction_date = floor_date(transaction_date, "month")) %>% # Agrupa por mes
summarise(VentasTotales = sum(cost))
# Limpiar y transformar los datos
datos <- datos %>%
mutate(cost = as.numeric(gsub("[\\$, ]", "", cost)), # Elimina $, espacios y comas de 'cost' y lo convierte a numérico
transaction_date = ymd(transaction_date), # Convierte 'transaction_date' a formato de fecha
Ventas = quantity * cost * (1 - discount)) %>% # Calcula las ventas
filter(!is.na(cost))  # Elimina filas con costos NA (Producto 23)
#Agrupamos por meses
datos <- datos %>%
group_by(Mes, transaction_date = floor_date(transaction_date, "month")) %>% # Agrupa por mes
summarise(VentasTotales = sum(cost))
# Promedio móvil
# Crear una serie de tiempo para las ventas diarias totales
ventas_ts <- ts(datos %>% group_by(transaction_date) %>% summarise(VentasTotales = sum(cost)) %>% pull(VentasTotales), frequency = 12)
# Calcular el promedio móvil (ejemplo con ventana de 7 días)
ventas_ma7 <- ma(ventas_ts, order = 7)
# Promedio móvil
# Crear una serie de tiempo para las ventas diarias totales
ventas_ts <- ts(datos %>% group_by(transaction_date) %>% summarise(VentasTotales = sum(cost)) %>% pull(VentasTotales), frequency = 12)
#Agrupamos por meses
datos <- datos %>%
group_by(Mes, transaction_date = floor_date(transaction_date, "month")) %>% # Agrupa por mes
summarise(cost = sum(cost))
library(readxl)
library(dplyr)
library(lubridate)
library(ggplot2)
library(forecast)
datos <- read_excel("MUESTRA SERIE TIEMPO.xlsx", col_types = c("numeric", "numeric", "date", "numeric", "text", "numeric", "text", "numeric", "text", "numeric"))
# Agregar una columna de mes para facilitar el análisis de estacionalidad
datos <- datos %>% mutate(Mes = month(transaction_date, label = TRUE, abbr = TRUE))
# Limpiar y transformar los datos
datos <- datos %>%
mutate(cost = as.numeric(gsub("[\\$, ]", "", cost)), # Elimina $, espacios y comas de 'cost' y lo convierte a numérico
transaction_date = ymd(transaction_date), # Convierte 'transaction_date' a formato de fecha
Ventas = quantity * cost * (1 - discount)) %>% # Calcula las ventas
filter(!is.na(cost))  # Elimina filas con costos NA (Producto 23)
#Agrupamos por meses
datos <- datos %>%
group_by(Mes, transaction_date = floor_date(transaction_date, "month")) %>% # Agrupa por mes
summarise(cost = sum(cost))
# Promedio móvil
# Crear una serie de tiempo para las ventas diarias totales
ventas_ts <- ts(datos %>% group_by(transaction_date) %>% summarise(VentasTotales = sum(cost)) %>% pull(VentasTotales), frequency = 12)
# Calcular el promedio móvil (ejemplo con ventana de 7 días)
ventas_ma7 <- ma(ventas_ts, order = 7)
library(readxl)
library(dplyr)
library(lubridate)
library(ggplot2)
library(forecast)
datos <- read_excel("MUESTRA SERIE TIEMPO.xlsx", col_types = c("numeric", "numeric", "date", "numeric", "text", "numeric", "text", "numeric", "text", "numeric"))
datos <- read_excel("MUESTRA SERIE TIEMPO.xlsx", col_types = c("numeric", "numeric", "date", "numeric", "text", "numeric", "text", "numeric", "text", "numeric"))
# Agregar una columna de mes para facilitar el análisis de estacionalidad
datos <- datos %>% mutate(Mes = month(transaction_date, label = TRUE, abbr = TRUE))
# Agregar una columna de mes para facilitar el análisis de estacionalidad
datos <- datos %>% mutate(Mes = month(transaction_date, label = TRUE, abbr = TRUE))
# Limpiar y transformar los datos
datos <- datos %>%
mutate(cost = as.numeric(gsub("[\\$, ]", "", cost)), # Elimina $, espacios y comas de 'cost' y lo convierte a numérico
transaction_date = ymd(transaction_date), # Convierte 'transaction_date' a formato de fecha
Ventas = quantity * cost * (1 - discount)) %>% # Calcula las ventas
filter(!is.na(cost))  # Elimina filas con costos NA (Producto 23)
# Promedio móvil
# Crear una serie de tiempo para las ventas diarias totales
ventas_ts <- ts(datos %>% group_by(transaction_date) %>% summarise(VentasTotales = sum(cost)) %>% pull(VentasTotales), frequency = 365)
# Calcular el promedio móvil (ejemplo con ventana de 7 días)
ventas_ma7 <- ma(ventas_ts, order = 7)
ventas_ma30 <- ma(ventas_ts, order = 30)
# Graficar la serie de tiempo y el promedio móvil
autoplot(ventas_ts) +
autolayer(ventas_ma7, series="Promedio Móvil 7 días") +
autolayer(ventas_ma30, series = "Promedio Móvil 30 días")+
ggtitle("Ventas Diarias Totales y Promedio Móvil") +
xlab("Fecha") + ylab("Ventas")
# 2. Rezagos (lags)
# Calcular el rezago de las ventas (ejemplo con 1 y 7 días de rezago)
ventas_lag1 <- lag(as.numeric(ventas_ts), 1)
ventas_lag7 <- lag(as.numeric(ventas_ts), 7)
# Crear el data.frame con los vectores numéricos
df_lags <- data.frame(Fecha = time(ventas_ts),
cost = ventas_ts,
Lag1 = ventas_lag1,
Lag7 = ventas_lag7)
# Graficar la serie y los rezagos
ggplot(df_lags, aes(x = Fecha)) +
geom_line(aes(y = cost, color = "cost")) +
geom_line(aes(y = Lag1, color = "Lag 1 día")) +
geom_line(aes(y = Lag7, color = "Lag 7 días")) +
ggtitle("Ventas Diarias Totales y Rezagos") +
xlab("Fecha") + ylab("cost") +
scale_color_manual(values = c("cost" = "blue", "Lag 1 día" = "red", "Lag 7 días" = "green"))
# Graficar la serie de tiempo y el promedio móvil
autoplot(ventas_ts) +
autolayer(ventas_ma7, series="Promedio Móvil 7 días") +
autolayer(ventas_ma30, series = "Promedio Móvil 30 días")+
ggtitle("Ventas Diarias Totales y Promedio Móvil") +
xlab("Fecha") + ylab("Ventas")
datos <- read_excel("MUESTRA SERIE TIEMPO.xlsx", col_types = c("numeric", "numeric", "date", "numeric", "text", "numeric", "text", "numeric", "text", "numeric"))
# Agregar una columna de mes para facilitar el análisis de estacionalidad
datos <- datos %>% mutate(Mes = month(transaction_date, label = TRUE, abbr = TRUE))
# Limpiar y transformar los datos
datos <- datos %>%
mutate(cost = as.numeric(gsub("[\\$, ]", "", cost)), # Elimina $, espacios y comas de 'cost' y lo convierte a numérico
transaction_date = ymd(transaction_date), # Convierte 'transaction_date' a formato de fecha
Ventas = quantity * cost * (1 - discount)) %>% # Calcula las ventas
filter(!is.na(cost))  # Elimina filas con costos NA (Producto 23)
# Promedio móvil
# Crear una serie de tiempo para las ventas diarias totales
ventas_ts <- ts(datos %>% group_by(transaction_date) %>% summarise(VentasTotales = sum(cost)) %>% pull(VentasTotales), frequency = 365)
# Calcular el promedio móvil (ejemplo con ventana de 7 días)
ventas_ma7 <- ma(ventas_ts, order = 7)
ventas_ma30 <- ma(ventas_ts, order = 30)
# Graficar la serie de tiempo y el promedio móvil
autoplot(ventas_ts) +
autolayer(ventas_ma7, series="Promedio Móvil 7 días") +
autolayer(ventas_ma30, series = "Promedio Móvil 30 días")+
ggtitle("Ventas Diarias Totales y Promedio Móvil") +
xlab("Fecha") + ylab("Ventas")
# 2. Rezagos (lags)
# Calcular el rezago de las ventas (ejemplo con 1 y 7 días de rezago)
ventas_lag1 <- lag(as.numeric(ventas_ts), 1)
ventas_lag7 <- lag(as.numeric(ventas_ts), 7)
# Crear el data.frame con los vectores numéricos
df_lags <- data.frame(Fecha = time(ventas_ts),
cost = ventas_ts,
Lag1 = ventas_lag1,
Lag7 = ventas_lag7)
# Graficar la serie y los rezagos
ggplot(df_lags, aes(x = Fecha)) +
geom_line(aes(y = cost, color = "cost")) +
geom_line(aes(y = Lag1, color = "Lag 1 día")) +
geom_line(aes(y = Lag7, color = "Lag 7 días")) +
ggtitle("Ventas Diarias Totales y Rezagos") +
xlab("Fecha") + ylab("cost") +
scale_color_manual(values = c("cost" = "blue", "Lag 1 día" = "red", "Lag 7 días" = "green"))
ventas_decomp <- decompose(ventas_ts)
autoplot(ventas_decomp) + ggtitle("Descomposición de la serie de tiempo de Ventas")
# Análisis con promedio mensual para ver la estacionalidad
ventas_mensual <- datos %>%
group_by(Mes, transaction_date = floor_date(transaction_date, "month")) %>% # Agrupa por mes y primer día del mes.
summarise(VentasTotales = sum(Ventas))
ggplot(ventas_mensual, aes(x = transaction_date, y = VentasTotales)) +
geom_line() +
ggtitle("Ventas Totales Mensuales") +
xlab("Fecha") + ylab("Ventas")+
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") # Ajusta etiquetas del eje x
install.packages("bookdown")
library(readxl)
library(dplyr)
library(lubridate)
library(ggplot2)
library(forecast)
datos <- read_excel("MUESTRA SERIE TIEMPO.xlsx", col_types = c("numeric", "numeric", "date", "numeric", "text", "numeric", "text", "numeric", "text", "numeric"))
# Agregar una columna de mes para facilitar el análisis de estacionalidad
datos <- datos %>% mutate(Mes = month(transaction_date, label = TRUE, abbr = TRUE))
# Limpiar y transformar los datos
datos <- datos %>%
mutate(cost = as.numeric(gsub("[\\$, ]", "", cost)), # Elimina $, espacios y comas de 'cost' y lo convierte a numérico
transaction_date = ymd(transaction_date), # Convierte 'transaction_date' a formato de fecha
Ventas = quantity * cost * (1 - discount)) %>% # Calcula las ventas
filter(!is.na(cost))  # Elimina filas con costos NA (Producto 23)
# Promedio móvil
# Crear una serie de tiempo para las ventas diarias totales
ventas_ts <- ts(datos %>% group_by(transaction_date) %>% summarise(VentasTotales = sum(cost)) %>% pull(VentasTotales), frequency = 365)
# Calcular el promedio móvil (ejemplo con ventana de 7 días)
ventas_ma7 <- ma(ventas_ts, order = 7)
ventas_ma30 <- ma(ventas_ts, order = 30)
# Graficar la serie de tiempo y el promedio móvil
autoplot(ventas_ts) +
autolayer(ventas_ma7, series="Promedio Móvil 7 días") +
autolayer(ventas_ma30, series = "Promedio Móvil 30 días")+
ggtitle("Ventas Diarias Totales y Promedio Móvil") +
xlab("Fecha") + ylab("Ventas")
# 2. Rezagos (lags)
# Calcular el rezago de las ventas (ejemplo con 1 y 7 días de rezago)
ventas_lag1 <- lag(as.numeric(ventas_ts), 1)
ventas_lag7 <- lag(as.numeric(ventas_ts), 7)
# Crear el data.frame con los vectores numéricos
df_lags <- data.frame(Fecha = time(ventas_ts),
cost = ventas_ts,
Lag1 = ventas_lag1,
Lag7 = ventas_lag7)
# Graficar la serie y los rezagos
ggplot(df_lags, aes(x = Fecha)) +
geom_line(aes(y = cost, color = "cost")) +
geom_line(aes(y = Lag1, color = "Lag 1 día")) +
geom_line(aes(y = Lag7, color = "Lag 7 días")) +
ggtitle("Ventas Diarias Totales y Rezagos") +
xlab("Fecha") + ylab("cost") +
scale_color_manual(values = c("cost" = "blue", "Lag 1 día" = "red", "Lag 7 días" = "green"))
# 3. Estacionalidad (usando descomposición)
ventas_decomp <- decompose(ventas_ts)
autoplot(ventas_decomp) + ggtitle("Descomposición de la serie de tiempo de Ventas")
# Análisis con promedio mensual para ver la estacionalidad
ventas_mensual <- datos %>%
group_by(Mes, transaction_date = floor_date(transaction_date, "month")) %>% # Agrupa por mes y primer día del mes.
summarise(VentasTotales = sum(Ventas))
ggplot(ventas_mensual, aes(x = transaction_date, y = VentasTotales)) +
geom_line() +
ggtitle("Ventas Totales Mensuales") +
xlab("Fecha") + ylab("Ventas")+
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") # Ajusta etiquetas del eje x
datos <- read_excel("MUESTRA SERIE TIEMPO.xlsx", col_types = c("numeric", "numeric", "date", "numeric", "text", "numeric", "text", "numeric", "text", "numeric"))
# Agregar una columna de mes para facilitar el análisis de estacionalidad
datos <- datos %>% mutate(Mes = month(transaction_date, label = TRUE, abbr = TRUE))
# Limpiar y transformar los datos
datos <- datos %>%
mutate(cost = as.numeric(gsub("[\\$, ]", "", cost)), # Elimina $, espacios y comas de 'cost' y lo convierte a numérico
transaction_date = ymd(transaction_date)) # Convierte 'transaction_date' a formato de fecha ) %>% # Calcula las ventas
filter(!is.na(cost))  # Elimina filas con costos NA (Producto 23)
# Limpiar y transformar los datos
datos <- datos %>%
mutate(cost = as.numeric(gsub("[\\$, ]", "", cost)), # Elimina $, espacios y comas de 'cost' y lo convierte a numérico
transaction_date = ymd(transaction_date)) %>%
filter(!is.na(cost))  # Elimina filas con costos NA (Producto 23)
# Promedio móvil
# Crear una serie de tiempo para las ventas diarias totales
ventas_ts <- ts(datos %>% group_by(transaction_date) %>% summarise(VentasTotales = sum(cost)) %>% pull(VentasTotales), frequency = 365)
# Calcular el promedio móvil (ejemplo con ventana de 7 días)
ventas_ma7 <- ma(ventas_ts, order = 7)
ventas_ma30 <- ma(ventas_ts, order = 30)
# Graficar la serie de tiempo y el promedio móvil
autoplot(ventas_ts) +
autolayer(ventas_ma7, series="Promedio Móvil 7 días") +
autolayer(ventas_ma30, series = "Promedio Móvil 30 días")+
ggtitle("Ventas Diarias Totales y Promedio Móvil") +
xlab("Fecha") + ylab("Ventas")
# 2. Rezagos (lags)
# Calcular el rezago de las ventas (ejemplo con 1 y 7 días de rezago)
ventas_lag1 <- lag(as.numeric(ventas_ts), 1)
ventas_lag7 <- lag(as.numeric(ventas_ts), 7)
# Crear el data.frame con los vectores numéricos
df_lags <- data.frame(Fecha = time(ventas_ts),
cost = ventas_ts,
Lag1 = ventas_lag1,
Lag7 = ventas_lag7)
# Graficar la serie y los rezagos
ggplot(df_lags, aes(x = Fecha)) +
geom_line(aes(y = cost, color = "cost")) +
geom_line(aes(y = Lag1, color = "Lag 1 día")) +
geom_line(aes(y = Lag7, color = "Lag 7 días")) +
ggtitle("Ventas Diarias Totales y Rezagos") +
xlab("Fecha") + ylab("cost") +
scale_color_manual(values = c("cost" = "blue", "Lag 1 día" = "red", "Lag 7 días" = "green"))
ventas_decomp <- decompose(ventas_ts)
autoplot(ventas_decomp) + ggtitle("Descomposición de la serie de tiempo de Ventas")
# Análisis con promedio mensual para ver la estacionalidad
ventas_mensual <- datos %>%
group_by(Mes, transaction_date = floor_date(transaction_date, "month")) %>% # Agrupa por mes y primer día del mes.
summarise(VentasTotales = sum(Ventas))
# Análisis con promedio mensual para ver la estacionalidad
ventas_mensual <- datos %>%
group_by(Mes, transaction_date = floor_date(transaction_date, "month")) %>% # Agrupa por mes y primer día del mes.
summarise(VentasTotales = sum(Ventas))
# Análisis con promedio mensual para ver la estacionalidad
ventas_mensual <- datos %>%
group_by(Mes, transaction_date = floor_date(transaction_date, "month")) %>% # Agrupa por mes y primer día del mes.
summarise(VentasTotales = sum(cost))
ggplot(ventas_mensual, aes(x = transaction_date, y = VentasTotales)) +
geom_line() +
ggtitle("Ventas Totales Mensuales") +
xlab("Fecha") + ylab("Ventas")+
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") # Ajusta etiquetas del eje x
# Instalar y cargar las librerías necesarias
if(!require(forecast)){install.packages("forecast")}
if(!require(tseries)){install.packages("tseries")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(zoo)){install.packages("zoo")}
if(!require(changepoint)){install.packages("changepoint")}
library(forecast)
library(tseries)
library(ggplot2)
library(zoo)
library(changepoint)
# Cargar los datos (Reemplaza con la ruta a tu archivo)
Datos <- read.xlsx("MUESTRA SERIE TIEMPO.xlsx")
# Instalar y cargar las librerías necesarias
if(!require(forecast)){install.packages("forecast")}
if(!require(tseries)){install.packages("tseries")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(zoo)){install.packages("zoo")}
if(!require(changepoint)){install.packages("changepoint")}
if(!require(readxl)){install.packages("readxl")}
library(forecast)
library(tseries)
library(ggplot2)
library(zoo)
library(changepoint)
library(readxl)
# Cargar los datos (Reemplaza con la ruta a tu archivo)
Datos <- read_excel("MUESTRA SERIE TIEMPO.xlsx")
# Instalar paquetes necesarios (si no los tienes instalados)
if(!require("forecast")) install.packages("forecast")
if(!require("tseries")) install.packages("tseries")
if(!require("ggplot2")) install.packages("ggplot2")
if(!require("zoo")) install.packages("zoo")
if(!require("changepoint")) install.packages("changepoint")
if(!require("tsoutliers")) install.packages("tsoutliers")
# Cargar paquetes
library(forecast)
library(tseries)
library(ggplot2)
library(zoo)
library(changepoint)
library(tsoutliers)
# Leer los datos (asumiendo que tu archivo se llama "MUESTRA SERIE TIEMPO.xlsx")
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO (1).xlsx")
# Leer los datos (asumiendo que tu archivo se llama "MUESTRA SERIE TIEMPO.xlsx")
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
head(datos)
# Crear serie de tiempo
# Asumir que quieres la cantidad total vendida por día
datos$transaction_date <- as.Date(datos$transaction_date, format = "%m/%d/%Y") # Asegurar formato de fecha
ventas_diarias <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Crear serie de tiempo
# Asumir que quieres la cantidad total vendida por día
datos$transaction_date <- as.Date(datos$transaction_date, format = "%m/%d/%Y") # Asegurar formato de fecha
ventas_diarias <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Crear serie de tiempo
# Asumir que quieres la cantidad total vendida por día
datos$transaction_date <- as.Date(datos$transaction_date, format = "%m/%d/%Y") # Asegurar formato de fecha
head(datos)
# Leer los datos (asumiendo que tu archivo se llama "MUESTRA SERIE TIEMPO.xlsx")
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
head(datos)
# Crear serie de tiempo
# Asumir que quieres la cantidad total vendida por día
datos$transaction_date <- as.Date(datos$transaction_date, format = "%m/%d/%Y") # Asegurar formato de fecha
head(datos)
# Leer los datos (asumiendo que tu archivo se llama "MUESTRA SERIE TIEMPO.xlsx")
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos <- as.dataframe(datos)
# Leer los datos (asumiendo que tu archivo se llama "MUESTRA SERIE TIEMPO.xlsx")
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos <- data.frame(datos)
# Leer los datos (asumiendo que tu archivo se llama "MUESTRA SERIE TIEMPO.xlsx")
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
class(datos)
# Leer los datos (asumiendo que tu archivo se llama "MUESTRA SERIE TIEMPO.xlsx")
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
mis_datos$fecha <- as.Date(datos$transaction_date, origin = "1900-01-01")
datos$fecha <- as.Date(datos$transaction_date, origin = "1900-01-01")
head(datos)
head(datos$fecha)
# Crear serie de tiempo
# Asumir que quieres la cantidad total vendida por día
datos$transaction_date <- as.Date(datos$transaction_date, format = "%m/%d/%Y") # Asegurar formato de fecha
head(datos)
datos$fecha <- as.Date(datos$transaction_date, origin = "1900-01-01")
# Crear serie de tiempo
# Asumir que quieres la cantidad total vendida por día
datos$transaction_date <- as.Date(datos$transaction_date, format = "dd/mm/yyyy") # Asegurar formato de fecha
head(datos)
# Leer los datos (asumiendo que tu archivo se llama "MUESTRA SERIE TIEMPO.xlsx")
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
# Crear serie de tiempo
# Asumir que quieres la cantidad total vendida por día
datos$transaction_date <- as.Date(datos$transaction_date) # Asegurar formato de fecha
head(datos)
# Crear serie de tiempo
# Asumir que quieres la cantidad total vendida por día
datos$transaction_date <- as.Date(datos$transaction_date, format = "dd/mm/yyyy") # Asegurar formato de fecha
head(datos)
# Leer los datos (asumiendo que tu archivo se llama "MUESTRA SERIE TIEMPO.xlsx")
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
# Crear serie de tiempo
# Asumir que quieres la cantidad total vendida por día
datos$transaction_date <- as.Date(datos$transaction_date) # Asegurar formato de fecha
head(datos)
