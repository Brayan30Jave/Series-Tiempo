# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
View(datos)
View(datos)
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
print(serie_tiempo)
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
print(serie_tiempo)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
View(datos)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
print(serie_tiempo)
str(datos)
print(sum(datos$quantity))
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
str(datos)
print(sum(datos$quantity))
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
print(serie_tiempo)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
str(datos)
print(sum(datos$quantity))
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
print(serie_tiempo)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
print(sum(datos$quantity))
str(datos)
sum(datos[datos$transaction_date >= as.Date("2017-01-01")])
sum(datos$transaction_date[datos$transaction_date >= as.Date("2017-01-01")])
sum([datos$transaction_date >= as.Date("2017-01-01")])
sum(datos$transaction_date >= as.Date("2017-01-01"))
sum(datos$transaction_date >= as.Date("2017-1-1"))
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
sum(datos$transaction_date >= as.Date("2017-1-1"))
sum(datos$quantity[datos$transaction_date >= as.Date("2017-1-1")])
View(datos)
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
sum(datos$quantity[datos$transaction_date >= as.Date("2017-1-1")])
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
sum(datos$quantity)
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
sum(datos$quantity)
View(datos)
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
sum(datos$quantity)
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
sum(datos$quantity[datos$transaction_date >= as.Date("2017-1-1")])
str(datos)
print(sum(datos$quantity))
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), end = c(2020, 12), frequency = 12)
print(serie_tiempo)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$transaction_date, start = c(2017, 1), frequency = 12)
print(serie_tiempo)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
sum(datos$quantity)
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
sum(datos$quantity[datos$transaction_date >= as.Date("2017-1-1")])
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), end = (2020, 12) frequency = 12)
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), end = (2020, 12), frequency = 12)
# Leer los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Calcular el error de suma de cuadrados
errores <- modelo_holt_winters$SSE
print(paste("Error de Suma de Cuadrados:", errores))
# Cargar la librería forecast para predicciones
library(forecast)
# Generar pronósticos para los próximos 12 períodos
pronostico <- forecast(modelo_holt_winters, h = 12)
plot(pronostico, main = "Pronóstico de la Serie Temporal con Holt-Winters")
# Leer los datos y transformar los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Calcular las métricas de precisión
rmse <- rmse(serie_tiempo, modelo_holt_winters$fitted)
library(Metrics)
# Calcular las métricas de precisión
rmse <- rmse(serie_tiempo, modelo_holt_winters$fitted)
mae <- mae(serie_tiempo, modelo_holt_winters$fitted)
mape <- mape(serie_tiempo, modelo_holt_winters$fitted) * 100
# Imprimir las métricas
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
cat("MAPE:", mape, "%", "\n")
# Cargar la librería forecast para predicciones
library(forecast)
library(Metrics)
# Leer los datos y transformar los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Calcular las métricas de precisión
rmse <- rmse(serie_tiempo, modelo_holt_winters$fitted)
mae <- mae(serie_tiempo, modelo_holt_winters$fitted)
mape <- mape(serie_tiempo, modelo_holt_winters$fitted) * 100
# Imprimir las métricas
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
cat("MAPE:", mape, "%", "\n")
# Generar pronósticos para los próximos 12 períodos
pronostico <- forecast(modelo_holt_winters, h = 12)
plot(pronostico, main = "Pronóstico de la Serie Temporal con Holt-Winters")
# Cargar la librería forecast para predicciones
library(forecast)
library(Metrics)
# Leer los datos y transformar los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Calcular las métricas de precisión
rmse <- rmse(serie_tiempo, modelo_holt_winters$fitted)
mae <- mae(serie_tiempo, modelo_holt_winters$fitted)
mape <- mape(serie_tiempo, modelo_holt_winters$fitted) * 100
# Imprimir las métricas
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
cat("MAPE:", mape, "%", "\n")
# Generar pronósticos para los próximos 12 períodos
pronostico <- forecast(modelo_holt_winters, h = 12)
plot(pronostico, main = "Pronóstico de la Serie Temporal con Holt-Winters")
# Cargar la librería forecast para predicciones
library(forecast)
library(Metrics)
# Leer los datos y transformar los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Calcular las métricas de precisión
rmse <- rmse(serie_tiempo, modelo_holt_winters$fitted)
mae <- mae(serie_tiempo, modelo_holt_winters$fitted)
mape <- mape(serie_tiempo, modelo_holt_winters$fitted) * 100
# Imprimir las métricas
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
cat("MAPE:", mape, "%", "\n")
# Generar pronósticos para los próximos 12 períodos
pronostico <- forecast(modelo_holt_winters, h = 12)
plot(pronostico, main = "Pronóstico de la Serie Temporal con Holt-Winters")
# Leer los datos y transformar los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Leer los datos y transformar los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Cargar la librería forecast para predicciones
library(forecast)
library(Metrics)
# Leer los datos y transformar los datos
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
datos <- aggregate(quantity ~ transaction_date, data = datos, FUN = sum)
# Convertir los datos a un objeto de serie temporal
serie_tiempo <- ts(datos$quantity, start = c(2017, 1), end = c(2020, 12), frequency = 12)
# Visualizar la serie temporal
plot(serie_tiempo, main = "Serie Temporal de Tiempo", ylab = "Tiempo", xlab = "Fecha")
# Suavizamiento exponencial simple
suavizado_simple <- HoltWinters(serie_tiempo, beta = FALSE, gamma = FALSE)
plot(suavizado_simple, main = "Suavizamiento Exponencial Simple")
# Aplicar el modelo Holt-Winters con componentes de tendencia y estacionalidad
modelo_holt_winters <- HoltWinters(serie_tiempo)
plot(modelo_holt_winters, main = "Modelo Holt-Winters con Tendencia y Estacionalidad")
# Calcular las métricas de precisión
rmse <- rmse(serie_tiempo, modelo_holt_winters$fitted)
mae <- mae(serie_tiempo, modelo_holt_winters$fitted)
mape <- mape(serie_tiempo, modelo_holt_winters$fitted) * 100
# Imprimir las métricas
cat("RMSE:", rmse, "\n")
cat("MAE:", mae, "\n")
cat("MAPE:", mape, "%", "\n")
# Generar pronósticos para los próximos 12 períodos
pronostico <- forecast(modelo_holt_winters, h = 12)
plot(pronostico, main = "Pronóstico de la Serie Temporal con Holt-Winters")
library(forecast)  # Para funciones de pronóstico y series de tiempo
library(tseries)   # Para pruebas de estacionariedad
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
# Asumiendo que la primera columna es la fecha y la segunda la variable de interés
datos_ts <- ts(datos$variable, frequency = 12, start = c(2020, 1))
# Asumiendo que la primera columna es la fecha y la segunda la variable de interés
datos_ts <- ts(datos$quantity, frequency = 12, start = c(2017, 1), end = c(2020,12))
str(datos)
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
str(datos)
# Asumiendo que la primera columna es la fecha y la segunda la variable de interés
datos_ts <- ts(datos$quantity, frequency = 12, start = c(2017, 1), end = c(2020,12))
plot(datos_ts)  # Gráfico de la serie de tiempo
acf(datos_ts)   # Función de autocorrelación
pacf(datos_ts)  # Función de autocorrelación parcial
adf.test(datos_ts)
modelo_auto <- auto.arima(datos_ts, ic = "aic")  # Puedes usar "bic" también
summary(modelo_auto)
checkresiduals(modelo_auto)  # O checkresiduals(modelo_sarima)
pronóstico <- forecast(modelo_auto, h = 12)  # Pronóstico para los próximos 12 periodos
plot(pronóstico)
modelo_auto <- auto.arima(datos_ts, ic = "bic")  # Puedes usar "bic" también
checkresiduals(modelo_auto)  # O checkresiduals(modelo_sarima)
pronóstico <- forecast(modelo_auto, h = 12)  # Pronóstico para los próximos 12 periodos
plot(pronóstico)
plot(datos_ts)  # Gráfico de la serie de tiempo
acf(datos_ts)   # Función de autocorrelación
pacf(datos_ts)  # Función de autocorrelación parcial
adf.test(datos_ts)
#Si la prueba indica que la serie no es estacionaria, deberás diferenciarla:
datos_ts_diff <- diff(datos_ts)
modelo_auto <- auto.arima(datos_ts, ic = "bic")  # Puedes usar "bic" también
summary(modelo_auto)
checkresiduals(modelo_auto)  # O checkresiduals(modelo_sarima)
pronóstico <- forecast(modelo_auto, h = 12)  # Pronóstico para los próximos 12 periodos
plot(pronóstico)
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
str(datos)
# Asumiendo que la primera columna es la fecha y la segunda la variable de interés
datos_ts <- ts(datos$quantity, frequency = 12, start = c(2017, 1), end = c(2020,12))
plot(datos_ts)  # Gráfico de la serie de tiempo
acf(datos_ts)   # Función de autocorrelación
pacf(datos_ts)  # Función de autocorrelación parcial
adf.test(datos_ts)
#Si la prueba indica que la serie no es estacionaria, deberás diferenciarla:
datos_ts_diff <- diff(datos_ts)
modelo_auto <- auto.arima(datos_ts, ic = "bic")  # Puedes usar "bic" también
summary(modelo_auto)
checkresiduals(modelo_auto)  # O checkresiduals(modelo_sarima)
pronóstico <- forecast(modelo_auto, h = 12)  # Pronóstico para los próximos 12 periodos
plot(pronóstico)
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
str(datos)
# Asumiendo que la primera columna es la fecha y la segunda la variable de interés
datos_ts <- ts(datos$quantity, frequency = 12, start = c(2017, 1), end = c(2020,12))
plot(datos_ts)  # Gráfico de la serie de tiempo
acf(datos_ts)   # Función de autocorrelación
pacf(datos_ts)  # Función de autocorrelación parcial
adf.test(datos_ts)
#Si la prueba indica que la serie no es estacionaria, deberás diferenciarla:
datos_ts_diff <- diff(datos_ts)
modelo_auto <- auto.arima(datos_ts, ic = "bic")  # Puedes usar "bic" también
summary(modelo_auto)
checkresiduals(modelo_auto)  # O checkresiduals(modelo_sarima)
pronóstico <- forecast(modelo_auto, h = 12)  # Pronóstico para los próximos 12 periodos
plot(pronóstico)
sum(datos$quantity)
datos <- readxl::read_excel("MUESTRA SERIE TIEMPO.xlsx")
sum(datos$quantity)
datos$transaction_date <- as.Date(datos$transaction_date, origin="1899-12-30")
str(datos)
# Asumiendo que la primera columna es la fecha y la segunda la variable de interés
datos_ts <- ts(datos$quantity, frequency = 12, start = c(2017, 1), end = c(2020,12))
plot(datos_ts)  # Gráfico de la serie de tiempo
acf(datos_ts)   # Función de autocorrelación
pacf(datos_ts)  # Función de autocorrelación parcial
adf.test(datos_ts)
#Si la prueba indica que la serie no es estacionaria, deberás diferenciarla:
datos_ts_diff <- diff(datos_ts)
modelo_auto <- auto.arima(datos_ts, ic = "bic")  # Puedes usar "bic" también
summary(modelo_auto)
checkresiduals(modelo_auto)  # O checkresiduals(modelo_sarima)
pronóstico <- forecast(modelo_auto, h = 12)  # Pronóstico para los próximos 12 periodos
plot(pronóstico)
adf.test(datos_ts_diff)
modelo_auto <- auto.arima(datos_ts_diff, ic = "bic")  # Puedes usar "bic" también
summary(modelo_auto)
checkresiduals(modelo_auto)  # O checkresiduals(modelo_sarima)
pronóstico <- forecast(modelo_auto, h = 12)  # Pronóstico para los próximos 12 periodos
plot(pronóstico)
